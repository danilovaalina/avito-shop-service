// Code generated by mockery v2.46.0. DO NOT EDIT.

package mockapi

import (
	model "avito-shop-service/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Balance provides a mock function with given fields: ctx, username
func (_m *Service) Balance(ctx context.Context, username string) (int64, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for Balance")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Balance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Balance'
type Service_Balance_Call struct {
	*mock.Call
}

// Balance is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *Service_Expecter) Balance(ctx interface{}, username interface{}) *Service_Balance_Call {
	return &Service_Balance_Call{Call: _e.mock.On("Balance", ctx, username)}
}

func (_c *Service_Balance_Call) Run(run func(ctx context.Context, username string)) *Service_Balance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_Balance_Call) Return(_a0 int64, _a1 error) *Service_Balance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Balance_Call) RunAndReturn(run func(context.Context, string) (int64, error)) *Service_Balance_Call {
	_c.Call.Return(run)
	return _c
}

// BuyItem provides a mock function with given fields: ctx, username, itemName
func (_m *Service) BuyItem(ctx context.Context, username string, itemName string) error {
	ret := _m.Called(ctx, username, itemName)

	if len(ret) == 0 {
		panic("no return value specified for BuyItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, username, itemName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_BuyItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuyItem'
type Service_BuyItem_Call struct {
	*mock.Call
}

// BuyItem is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - itemName string
func (_e *Service_Expecter) BuyItem(ctx interface{}, username interface{}, itemName interface{}) *Service_BuyItem_Call {
	return &Service_BuyItem_Call{Call: _e.mock.On("BuyItem", ctx, username, itemName)}
}

func (_c *Service_BuyItem_Call) Run(run func(ctx context.Context, username string, itemName string)) *Service_BuyItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Service_BuyItem_Call) Return(_a0 error) *Service_BuyItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_BuyItem_Call) RunAndReturn(run func(context.Context, string, string) error) *Service_BuyItem_Call {
	_c.Call.Return(run)
	return _c
}

// Inventory provides a mock function with given fields: ctx, username
func (_m *Service) Inventory(ctx context.Context, username string) ([]model.Inventory, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for Inventory")
	}

	var r0 []model.Inventory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.Inventory, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Inventory); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Inventory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Inventory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inventory'
type Service_Inventory_Call struct {
	*mock.Call
}

// Inventory is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *Service_Expecter) Inventory(ctx interface{}, username interface{}) *Service_Inventory_Call {
	return &Service_Inventory_Call{Call: _e.mock.On("Inventory", ctx, username)}
}

func (_c *Service_Inventory_Call) Run(run func(ctx context.Context, username string)) *Service_Inventory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_Inventory_Call) Return(_a0 []model.Inventory, _a1 error) *Service_Inventory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Inventory_Call) RunAndReturn(run func(context.Context, string) ([]model.Inventory, error)) *Service_Inventory_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *Service) Login(ctx context.Context, username string, password string) (string, error) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type Service_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
func (_e *Service_Expecter) Login(ctx interface{}, username interface{}, password interface{}) *Service_Login_Call {
	return &Service_Login_Call{Call: _e.mock.On("Login", ctx, username, password)}
}

func (_c *Service_Login_Call) Run(run func(ctx context.Context, username string, password string)) *Service_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *Service_Login_Call) Return(_a0 string, _a1 error) *Service_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Login_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *Service_Login_Call {
	_c.Call.Return(run)
	return _c
}

// SendCoin provides a mock function with given fields: ctx, fromUser, toUser, amount
func (_m *Service) SendCoin(ctx context.Context, fromUser string, toUser string, amount int) error {
	ret := _m.Called(ctx, fromUser, toUser, amount)

	if len(ret) == 0 {
		panic("no return value specified for SendCoin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(ctx, fromUser, toUser, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_SendCoin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCoin'
type Service_SendCoin_Call struct {
	*mock.Call
}

// SendCoin is a helper method to define mock.On call
//   - ctx context.Context
//   - fromUser string
//   - toUser string
//   - amount int
func (_e *Service_Expecter) SendCoin(ctx interface{}, fromUser interface{}, toUser interface{}, amount interface{}) *Service_SendCoin_Call {
	return &Service_SendCoin_Call{Call: _e.mock.On("SendCoin", ctx, fromUser, toUser, amount)}
}

func (_c *Service_SendCoin_Call) Run(run func(ctx context.Context, fromUser string, toUser string, amount int)) *Service_SendCoin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *Service_SendCoin_Call) Return(_a0 error) *Service_SendCoin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_SendCoin_Call) RunAndReturn(run func(context.Context, string, string, int) error) *Service_SendCoin_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: ctx, username
func (_m *Service) Transaction(ctx context.Context, username string) ([]model.Transaction, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 []model.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.Transaction, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Transaction); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Service_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type Service_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *Service_Expecter) Transaction(ctx interface{}, username interface{}) *Service_Transaction_Call {
	return &Service_Transaction_Call{Call: _e.mock.On("Transaction", ctx, username)}
}

func (_c *Service_Transaction_Call) Run(run func(ctx context.Context, username string)) *Service_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Service_Transaction_Call) Return(_a0 []model.Transaction, _a1 error) *Service_Transaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Service_Transaction_Call) RunAndReturn(run func(context.Context, string) ([]model.Transaction, error)) *Service_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
