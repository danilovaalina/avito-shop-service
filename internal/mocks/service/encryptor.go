// Code generated by mockery v2.46.0. DO NOT EDIT.

package mockservice

import mock "github.com/stretchr/testify/mock"

// Encryptor is an autogenerated mock type for the Encryptor type
type Encryptor struct {
	mock.Mock
}

type Encryptor_Expecter struct {
	mock *mock.Mock
}

func (_m *Encryptor) EXPECT() *Encryptor_Expecter {
	return &Encryptor_Expecter{mock: &_m.Mock}
}

// Encrypt provides a mock function with given fields: password
func (_m *Encryptor) Encrypt(password string) (string, error) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encryptor_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type Encryptor_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - password string
func (_e *Encryptor_Expecter) Encrypt(password interface{}) *Encryptor_Encrypt_Call {
	return &Encryptor_Encrypt_Call{Call: _e.mock.On("Encrypt", password)}
}

func (_c *Encryptor_Encrypt_Call) Run(run func(password string)) *Encryptor_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Encryptor_Encrypt_Call) Return(_a0 string, _a1 error) *Encryptor_Encrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Encryptor_Encrypt_Call) RunAndReturn(run func(string) (string, error)) *Encryptor_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: hash, password
func (_m *Encryptor) Verify(hash string, password string) error {
	ret := _m.Called(hash, password)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(hash, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Encryptor_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type Encryptor_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - hash string
//   - password string
func (_e *Encryptor_Expecter) Verify(hash interface{}, password interface{}) *Encryptor_Verify_Call {
	return &Encryptor_Verify_Call{Call: _e.mock.On("Verify", hash, password)}
}

func (_c *Encryptor_Verify_Call) Run(run func(hash string, password string)) *Encryptor_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Encryptor_Verify_Call) Return(_a0 error) *Encryptor_Verify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Encryptor_Verify_Call) RunAndReturn(run func(string, string) error) *Encryptor_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewEncryptor creates a new instance of Encryptor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEncryptor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Encryptor {
	mock := &Encryptor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
