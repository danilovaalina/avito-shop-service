// Code generated by mockery v2.46.0. DO NOT EDIT.

package mockservice

import mock "github.com/stretchr/testify/mock"

// Tokenizer is an autogenerated mock type for the Tokenizer type
type Tokenizer struct {
	mock.Mock
}

type Tokenizer_Expecter struct {
	mock *mock.Mock
}

func (_m *Tokenizer) EXPECT() *Tokenizer_Expecter {
	return &Tokenizer_Expecter{mock: &_m.Mock}
}

// CreateToken provides a mock function with given fields: username
func (_m *Tokenizer) CreateToken(username string) (string, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Tokenizer_CreateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateToken'
type Tokenizer_CreateToken_Call struct {
	*mock.Call
}

// CreateToken is a helper method to define mock.On call
//   - username string
func (_e *Tokenizer_Expecter) CreateToken(username interface{}) *Tokenizer_CreateToken_Call {
	return &Tokenizer_CreateToken_Call{Call: _e.mock.On("CreateToken", username)}
}

func (_c *Tokenizer_CreateToken_Call) Run(run func(username string)) *Tokenizer_CreateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Tokenizer_CreateToken_Call) Return(_a0 string, _a1 error) *Tokenizer_CreateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Tokenizer_CreateToken_Call) RunAndReturn(run func(string) (string, error)) *Tokenizer_CreateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenizer creates a new instance of Tokenizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Tokenizer {
	mock := &Tokenizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
