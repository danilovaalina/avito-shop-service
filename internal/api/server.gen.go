// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	// Password Пароль для аутентификации.
	Password string `json:"password"`

	// Username Имя пользователя для аутентификации.
	Username string `json:"username"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	// Token JWT-токен для доступа к защищенным ресурсам.
	Token *string `json:"token,omitempty"`
}

// BuyItemRequest defines model for BuyItemRequest.
type BuyItemRequest struct {
	// Item Название предмета для покупки.
	Item string `json:"item"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Errors Сообщение об ошибке, описывающее проблему.
	Errors string `json:"errors"`
}

// InfoResponse defines model for InfoResponse.
type InfoResponse struct {
	CoinHistory *struct {
		Received *[]struct {
			// Amount Количество полученных монет.
			Amount int `json:"amount"`

			// FromUser Имя пользователя, который отправил монеты.
			FromUser string `json:"fromUser"`
		} `json:"received,omitempty"`
		Sent *[]struct {
			// Amount Количество отправленных монет.
			Amount int `json:"amount"`

			// ToUser Имя пользователя, которому отправлены монеты.
			ToUser string `json:"toUser"`
		} `json:"sent,omitempty"`
	} `json:"coinHistory,omitempty"`

	// Coins Количество доступных монет.
	Coins     int `json:"coins"`
	Inventory *[]struct {
		// Quantity Количество предметов.
		Quantity int `json:"quantity"`

		// Type Тип предмета.
		Type string `json:"type"`
	} `json:"inventory,omitempty"`
}

// SendCoinRequest defines model for SendCoinRequest.
type SendCoinRequest struct {
	// Amount Количество монет, которые необходимо отправить.
	Amount int `json:"amount"`

	// ToUser Имя пользователя, которому нужно отправить монеты.
	ToUser string `json:"toUser"`
}

// PostApiAuthJSONRequestBody defines body for PostApiAuth for application/json ContentType.
type PostApiAuthJSONRequestBody = AuthRequest

// PostApiBuyJSONRequestBody defines body for PostApiBuy for application/json ContentType.
type PostApiBuyJSONRequestBody = BuyItemRequest

// PostApiSendCoinJSONRequestBody defines body for PostApiSendCoin for application/json ContentType.
type PostApiSendCoinJSONRequestBody = SendCoinRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Аутентификация и получение JWT-токена. При первой аутентификации пользователь создается автоматически.
	// (POST /api/auth)
	PostApiAuth(ctx echo.Context) error
	// Купить предмет за монеты.
	// (POST /api/buy)
	PostApiBuy(ctx echo.Context) error
	// Получить информацию о монетах, инвентаре и истории транзакций.
	// (GET /api/info)
	GetApiInfo(ctx echo.Context) error
	// Отправить монеты другому пользователю.
	// (POST /api/sendCoin)
	PostApiSendCoin(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostApiAuth converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAuth(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiAuth(ctx)
	return err
}

// PostApiBuy converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiBuy(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiBuy(ctx)
	return err
}

// GetApiInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiInfo(ctx)
	return err
}

// PostApiSendCoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiSendCoin(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiSendCoin(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/api/auth", wrapper.PostApiAuth)
	router.POST(baseURL+"/api/buy", wrapper.PostApiBuy)
	router.GET(baseURL+"/api/info", wrapper.GetApiInfo)
	router.POST(baseURL+"/api/sendCoin", wrapper.PostApiSendCoin)

}

type PostApiAuthRequestObject struct {
	Body *PostApiAuthJSONRequestBody
}

type PostApiAuthResponseObject interface {
	VisitPostApiAuthResponse(w http.ResponseWriter) error
}

type PostApiAuth200JSONResponse AuthResponse

func (response PostApiAuth200JSONResponse) VisitPostApiAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAuth400JSONResponse ErrorResponse

func (response PostApiAuth400JSONResponse) VisitPostApiAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAuth401JSONResponse ErrorResponse

func (response PostApiAuth401JSONResponse) VisitPostApiAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAuth500JSONResponse ErrorResponse

func (response PostApiAuth500JSONResponse) VisitPostApiAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiBuyRequestObject struct {
	Body *PostApiBuyJSONRequestBody
}

type PostApiBuyResponseObject interface {
	VisitPostApiBuyResponse(w http.ResponseWriter) error
}

type PostApiBuy200Response struct {
}

func (response PostApiBuy200Response) VisitPostApiBuyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostApiBuy400JSONResponse ErrorResponse

func (response PostApiBuy400JSONResponse) VisitPostApiBuyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostApiBuy401JSONResponse ErrorResponse

func (response PostApiBuy401JSONResponse) VisitPostApiBuyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostApiBuy500JSONResponse ErrorResponse

func (response PostApiBuy500JSONResponse) VisitPostApiBuyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiInfoRequestObject struct {
}

type GetApiInfoResponseObject interface {
	VisitGetApiInfoResponse(w http.ResponseWriter) error
}

type GetApiInfo200JSONResponse InfoResponse

func (response GetApiInfo200JSONResponse) VisitGetApiInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiInfo400JSONResponse ErrorResponse

func (response GetApiInfo400JSONResponse) VisitGetApiInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetApiInfo401JSONResponse ErrorResponse

func (response GetApiInfo401JSONResponse) VisitGetApiInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetApiInfo500JSONResponse ErrorResponse

func (response GetApiInfo500JSONResponse) VisitGetApiInfoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiSendCoinRequestObject struct {
	Body *PostApiSendCoinJSONRequestBody
}

type PostApiSendCoinResponseObject interface {
	VisitPostApiSendCoinResponse(w http.ResponseWriter) error
}

type PostApiSendCoin200Response struct {
}

func (response PostApiSendCoin200Response) VisitPostApiSendCoinResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PostApiSendCoin400JSONResponse ErrorResponse

func (response PostApiSendCoin400JSONResponse) VisitPostApiSendCoinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostApiSendCoin401JSONResponse ErrorResponse

func (response PostApiSendCoin401JSONResponse) VisitPostApiSendCoinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostApiSendCoin500JSONResponse ErrorResponse

func (response PostApiSendCoin500JSONResponse) VisitPostApiSendCoinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Аутентификация и получение JWT-токена. При первой аутентификации пользователь создается автоматически.
	// (POST /api/auth)
	PostApiAuth(ctx context.Context, request PostApiAuthRequestObject) (PostApiAuthResponseObject, error)
	// Купить предмет за монеты.
	// (POST /api/buy)
	PostApiBuy(ctx context.Context, request PostApiBuyRequestObject) (PostApiBuyResponseObject, error)
	// Получить информацию о монетах, инвентаре и истории транзакций.
	// (GET /api/info)
	GetApiInfo(ctx context.Context, request GetApiInfoRequestObject) (GetApiInfoResponseObject, error)
	// Отправить монеты другому пользователю.
	// (POST /api/sendCoin)
	PostApiSendCoin(ctx context.Context, request PostApiSendCoinRequestObject) (PostApiSendCoinResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostApiAuth operation middleware
func (sh *strictHandler) PostApiAuth(ctx echo.Context) error {
	var request PostApiAuthRequestObject

	var body PostApiAuthJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAuth(ctx.Request().Context(), request.(PostApiAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiAuthResponseObject); ok {
		return validResponse.VisitPostApiAuthResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiBuy operation middleware
func (sh *strictHandler) PostApiBuy(ctx echo.Context) error {
	var request PostApiBuyRequestObject

	var body PostApiBuyJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiBuy(ctx.Request().Context(), request.(PostApiBuyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiBuy")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiBuyResponseObject); ok {
		return validResponse.VisitPostApiBuyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetApiInfo operation middleware
func (sh *strictHandler) GetApiInfo(ctx echo.Context) error {
	var request GetApiInfoRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiInfo(ctx.Request().Context(), request.(GetApiInfoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiInfo")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetApiInfoResponseObject); ok {
		return validResponse.VisitGetApiInfoResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostApiSendCoin operation middleware
func (sh *strictHandler) PostApiSendCoin(ctx echo.Context) error {
	var request PostApiSendCoinRequestObject

	var body PostApiSendCoinJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiSendCoin(ctx.Request().Context(), request.(PostApiSendCoinRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiSendCoin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostApiSendCoinResponseObject); ok {
		return validResponse.VisitPostApiSendCoinResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXy27bRhT9FWLaJSs5fQCBdnbRh7MKmhRZBF4w0jhmanGY4dCFEAjQI2kTOEiKrooA",
	"adD2B2hVqhlZon7hzB8Vd0i9qUhG7ABFvRNnKN4z595z75lHrCyqvvC4pwJWesSC8gGvOubndqgOvuMP",
	"Qx4oevSl8LlULjebvhMEPwpZod8VHpSl6ytXeKzE8AaRbiDBmX5uoYsz/dJCpNu6hR6GuoVYP0aMPiL9",
	"E2LEBWazfSGrjmKl6Wdtpmo+ZyUWKOl691ndZmHApedUeU7I3zCgKKM0Kk6RoIPIRDThN0OxELFuM8kf",
	"hq7kFVa6Ow1vT1HuTf4k7j3gZUUwU9oCX3gBX+ZNiR+4t3yCG3duf6JbSNAneBPAXSS6qVu6jREiC30L",
	"p4j0M8T6Gb2HoT7GwNIN9HRTt3VDNxFhkH+WJaA7YW1X8erKFLuKV3O4fo0Ip0QvhojRszCi+OhigJ5u",
	"EcwMPGWjb6D3N+HXhMsj9CsphVzNKKftIAfoH0iQ4CSjykBNcGIh0U8R44SotmlphFg39bGpmBfm7exQ",
	"CU5whh4Gur0efgYj7wC73r5Yjb8sXO9bN1BC1pY3JS9z94hXxvkIll9xqiL0VM75X5EaEOufTXW00EEy",
	"lkibFtP60U8sDJBgSNmbOabrKX6fS8K/L0X1+4DLcwvPttBHQnWtG/oYby3zQNRG6CDG2Uxofbye4wkQ",
	"e3zqPLqzBUdKp0bPAU/puRD+Zg9wdg4OlXhvBpFQJeZA0Mfn5DEDcw4W8/oHFW6wKW+znWwzxlzviHtj",
	"VazI3cPQ8ZSrahtX/1yrStBZkSyzsvTJPxFjtNTvNqCbdu0p2I3onv1AynTe325xr/KlcL2VTfx81T1J",
	"yYJyexYtm276BAm6iOnVBTnrln5+6cU/1G38g2Fu8AtXgWke5VC6qnaLfFFK6Q53JJc05unpnnn6emxg",
	"bty5zezURdGX0t0plAOlfFavm/LeF8YQuOqQdrZv7lrbR64SVnAgfGazIy6DlKZrha3CFvEofO45vstK",
	"7DOzRE5EHRhQRcd3i06GyRdpKVAhOMT1boWV2E0RqG3fNcBTJnigdkSllk4hT2V90vH9Q7ds/ld8EAhv",
	"agvp18eS77MS+6g49Y3FzDQWZx1jfZ5uJUNuFtIxaDB/urV1waGzGWtiL5TaX7qJEXr6KYaI3mkG9csC",
	"kf35BaKbtzB58F6jhw56umE83Vtj9FITopsZnGsfGE6ETqa9eKxMDA2WLz4oNb+S6HXLdF0aty8pe1MT",
	"F1m6aYhL6YsKqW7DatWh2cHwy+pEW4gXLRH5xHk3jqhg4Q3RYJkKokgJpegd14lVPe05gU1wii4i06ea",
	"phRTpjEw72U9OXXNdBaj7Xthba20d8LaJSl74a6wubhXq3BqCDupCbjS3H9dc9msZKW781Py7l59b06S",
	"r4wPzIb2nJ8ySVgY5BMNjGfmfZ6jgW84SYDuWuwS58zcXW7NnLmq8P9vhb+ZDJWsymMM9WNz7kE2fV5Y",
	"c5YbkX5im/cophkqEaEzMyo2Hj1lLbYM7AhDk86+mThvZ2QSZJeCtfNifHu4pKGxeDm5mhpXmnofTf3+",
	"zgufha5u6Db+Hl8V8x3Yi0IKfV1YLukCZnZDeZhd3UrF4qEoO4cHIlCl61vXt1h9r/5vAAAA//9sNLqY",
	"QxcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
